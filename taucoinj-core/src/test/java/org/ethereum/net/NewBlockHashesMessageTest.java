package org.ethereum.net;

import org.ethereum.net.eth.message.BlockHashesMessage;
import org.ethereum.net.eth.message.EthMessageCodes;
import org.ethereum.net.eth.message.NewBlockHashesMessage;
import org.junit.Test;
import org.spongycastle.util.encoders.Hex;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;

/**
 * @author Mikhail Kalinin
 * @since 20.08.2015
 */
public class NewBlockHashesMessageTest {

    @Test /* NewBlockHashesMessage 1 from network */
    public void test_1() {

        String blockHashesMessageRaw = "";

        byte[] payload = Hex.decode(blockHashesMessageRaw);
        NewBlockHashesMessage newBlockHashesMessage = new NewBlockHashesMessage(payload);
        System.out.println(newBlockHashesMessage);

        assertEquals(EthMessageCodes.NEW_BLOCK_HASHES, newBlockHashesMessage.getCommand());
        assertEquals(128, newBlockHashesMessage.getBlockHashes().size());

        assertEquals(null, newBlockHashesMessage.getAnswerMessage());
    }

    @Test /* NewBlockHashesMessage 2 from new */
    public void test_2() {
        List<byte[]> blockHashes = Arrays.asList(
                Hex.decode("4ee6424d776b3f59affc20bc2de59e67f36e22cc07897ff8df152242c921716b"),
                Hex.decode("7d2fe4df0dbbc9011da2b3bf177f0c6b7e71a11c509035c5d751efa5cf9b4817")
        );
        NewBlockHashesMessage newBlockHashesMessage = new NewBlockHashesMessage(blockHashes);
        System.out.println(newBlockHashesMessage);

        String expected = "f842a04ee6424d776b3f59affc20bc2de59e67f36e22cc07897ff8df152242c921716ba07d2fe4df0dbbc9011da2b3bf177f0c6b7e71a11c509035c5d751efa5cf9b4817";
        assertEquals(expected, Hex.toHexString(newBlockHashesMessage.getEncoded()));

        assertEquals(EthMessageCodes.NEW_BLOCK_HASHES, newBlockHashesMessage.getCommand());
        assertEquals(2, newBlockHashesMessage.getBlockHashes().size());

        assertEquals(null, newBlockHashesMessage.getAnswerMessage());
    }
}
